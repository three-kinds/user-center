// Code generated by MockGen. DO NOT EDIT.
// Source: auth_service.go

// Package auth_service is a generated GoMock package.
package auth_service

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// ForgotPassword mocks base method.
func (m *MockIAuthService) ForgotPassword(email, captchaKey, captchaAnswer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", email, captchaKey, captchaAnswer)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockIAuthServiceMockRecorder) ForgotPassword(email, captchaKey, captchaAnswer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockIAuthService)(nil).ForgotPassword), email, captchaKey, captchaAnswer)
}

// GetCaptcha mocks base method.
func (m *MockIAuthService) GetCaptcha() (string, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCaptcha")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetCaptcha indicates an expected call of GetCaptcha.
func (mr *MockIAuthServiceMockRecorder) GetCaptcha() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaptcha", reflect.TypeOf((*MockIAuthService)(nil).GetCaptcha))
}

// ObtainToken mocks base method.
func (m *MockIAuthService) ObtainToken(account, password string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObtainToken", account, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ObtainToken indicates an expected call of ObtainToken.
func (mr *MockIAuthServiceMockRecorder) ObtainToken(account, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObtainToken", reflect.TypeOf((*MockIAuthService)(nil).ObtainToken), account, password)
}

// RefreshToken mocks base method.
func (m *MockIAuthService) RefreshToken(refreshToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockIAuthServiceMockRecorder) RefreshToken(refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockIAuthService)(nil).RefreshToken), refreshToken)
}

// RegisterUser mocks base method.
func (m *MockIAuthService) RegisterUser(email, password, captchaKey, captchaAnswer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", email, password, captchaKey, captchaAnswer)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockIAuthServiceMockRecorder) RegisterUser(email, password, captchaKey, captchaAnswer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockIAuthService)(nil).RegisterUser), email, password, captchaKey, captchaAnswer)
}

// ResetPassword mocks base method.
func (m *MockIAuthService) ResetPassword(codeKey, newPassword, captchaKey, captchaAnswer string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", codeKey, newPassword, captchaKey, captchaAnswer)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockIAuthServiceMockRecorder) ResetPassword(codeKey, newPassword, captchaKey, captchaAnswer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockIAuthService)(nil).ResetPassword), codeKey, newPassword, captchaKey, captchaAnswer)
}
