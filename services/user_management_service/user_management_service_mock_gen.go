// Code generated by MockGen. DO NOT EDIT.
// Source: user_management_service.go

// Package mock_services is a generated GoMock package.
package user_management_service

import (
	"github.com/three-kinds/user-center/services/user_service"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIUserManagementService is a mock of IUserManagementService interface.
type MockIUserManagementService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserManagementServiceMockRecorder
}

// MockIUserManagementServiceMockRecorder is the mock recorder for MockIUserManagementService.
type MockIUserManagementServiceMockRecorder struct {
	mock *MockIUserManagementService
}

// NewMockIUserManagementService creates a new mock instance.
func NewMockIUserManagementService(ctrl *gomock.Controller) *MockIUserManagementService {
	mock := &MockIUserManagementService{ctrl: ctrl}
	mock.recorder = &MockIUserManagementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserManagementService) EXPECT() *MockIUserManagementServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserManagementService) CreateUser(createUserBO *CreateUserBO) (*user_service.UserBO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", createUserBO)
	ret0, _ := ret[0].(*user_service.UserBO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserManagementServiceMockRecorder) CreateUser(createUserBO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserManagementService)(nil).CreateUser), createUserBO)
}

// DeleteUser mocks base method.
func (m *MockIUserManagementService) DeleteUser(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIUserManagementServiceMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIUserManagementService)(nil).DeleteUser), id)
}

// GetUserByID mocks base method.
func (m *MockIUserManagementService) GetUserByID(id int64) (*user_service.UserBO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*user_service.UserBO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockIUserManagementServiceMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockIUserManagementService)(nil).GetUserByID), id)
}

// GetUserByUsername mocks base method.
func (m *MockIUserManagementService) GetUserByUsername(username string) (*user_service.UserBO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*user_service.UserBO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockIUserManagementServiceMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockIUserManagementService)(nil).GetUserByUsername), username)
}

// ListUsers mocks base method.
func (m *MockIUserManagementService) ListUsers(page, size int, isActive, isSuperuser *bool) (int64, []*user_service.UserBO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", page, size, isActive, isSuperuser)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*user_service.UserBO)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockIUserManagementServiceMockRecorder) ListUsers(page, size, isActive, isSuperuser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockIUserManagementService)(nil).ListUsers), page, size, isActive, isSuperuser)
}

// PartialUpdateUser mocks base method.
func (m *MockIUserManagementService) PartialUpdateUser(id int64, updateUserBO *UpdateUserBO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartialUpdateUser", id, updateUserBO)
	ret0, _ := ret[0].(error)
	return ret0
}

// PartialUpdateUser indicates an expected call of PartialUpdateUser.
func (mr *MockIUserManagementServiceMockRecorder) PartialUpdateUser(id, updateUserBO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartialUpdateUser", reflect.TypeOf((*MockIUserManagementService)(nil).PartialUpdateUser), id, updateUserBO)
}
